buildscript {
    ext.kotlin_version = '1.3.50'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    //https://mvnrepository.com/artifact/org.jetbrains.kotlin.jvm/org.jetbrains.kotlin.jvm.gradle.plugin
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'

    //https://mvnrepository.com/artifact/org.jetbrains.intellij/org.jetbrains.intellij.gradle.plugin
    id "org.jetbrains.intellij" version "0.4.11"
}

group 'com.itangcent'
version plugin_version

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'

intellij {
    version idea_version
    pluginName plugin_name
    updateSinceUntilBuild false
    downloadSources true
    sandboxDirectory "idea-sandbox"
    instrumentCode = true
    updateSinceUntilBuild false
    sameSinceUntilBuild false

    plugins 'org.jetbrains.kotlin:1.3.11-release-IJ2017.3-1'
//    plugins 'org.jetbrains.kotlin:1.3.21-release-IJ2018.2-1' //dependency kotlin

    plugins 'org.intellij.scala:2017.3.11'

//    plugins = ['java']
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

patchPluginXml {
    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
}

jar {
    excludes = ["com/google/common/**"
                , "org/checkerframework/checker/**"
                , "afu/org/checkerframework/checker/**"
                , "afu/org/plume/**"
                , "kotlin/**"
                , "org/jetbrains/annotations/**"
                , "org/intellij/langannotations/**"
    ]
//    excludes = ["com/google/common/**"]
//    excludes = ["com/google/common/**", "org/apache/http/util/**"]
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    from { configurations.runtime }
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

repositories {

//    flatDir {
//        dirs 'libs'
//    }

    mavenCentral()

    maven {
        url("https://oss.sonatype.org/content/repositories/snapshots/")
    }
}

dependencies {
    compile(project(path: ':common-api', configuration: 'default')) {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

//    compile fileTree(dir: 'libs', include: ['*.jar'])


    compile('com.itangcent:intellij-idea:0.7.4-SNAPSHOT') {
        exclude group: 'com.google.inject'
        exclude group: 'com.google.code.gson'
    }

    compile('com.itangcent:intellij-kotlin-support:0.7.4-SNAPSHOT') {
        exclude group: 'com.google.inject'
        exclude group: 'com.google.code.gson'
    }

    compile('com.itangcent:intellij-scala-support:0.7.4-SNAPSHOT') {
        exclude group: 'com.google.inject'
        exclude group: 'com.google.code.gson'
    }

    compile("com.google.inject:guice:4.2.2") {
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'com.google.guava', module: 'guava'
    }

    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    testImplementation group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.12.1'

// https://mvnrepository.com/artifact/org.jetbrains.anko/anko-sqlite
//    compile group: 'org.jetbrains.anko', name: 'anko-sqlite', version: '0.10.4'

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


task findSpi {
    try {
        def names = [] as Set<String>
        def duplicated = [] as Set<String>
        //find duplicated files
        configurations.compile.forEach {
            if (it.isFile()) {
                zipTree(it)
                        .filter { it.parentFile.path.endsWith("META-INF/services") }
                        .forEach {
                            if (!names.add(it.name)) {
                                if (!duplicated.contains(it.name)) {
                                    duplicated.add(it.name)
                                }
                            }
                        }
            }
        }

        def servicesDir = new File("./src/main/resources/META-INF/services/")
        servicesDir.delete()
        servicesDir.mkdirs()

        duplicated.forEach {
            try {
                def targetFile = new File(servicesDir, it)
                targetFile.createNewFile()
                targetFile.text = ""
            } catch (e) {
                println("error:" + e)
            }
        }

        configurations.compile.forEach {
            if (it.isFile()) {
                zipTree(it)
                        .filter {
                            it.parentFile.path.endsWith("META-INF/services") &&
                                    duplicated.contains(it.name)
                        }
                        .forEach {
                            try {
                                def targetFile = new File(servicesDir, it.name)
                                if (!targetFile.exists()) {
                                    targetFile.createNewFile()
                                }
                                targetFile.append(it.text)
                                targetFile.append("\n")
                            } catch (e) {
                                println("error to append services info to:" + it.name + e)
                            }
                        }
            }
        }
    } catch (e) {
        println("error to find spi:" + e)
    }
}