buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    //https://mvnrepository.com/artifact/org.jetbrains.intellij/org.jetbrains.intellij.gradle.plugin
    id "org.jetbrains.intellij" version "0.4.11"
}

group 'com.itangcent'
version plugin_version

apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'
sourceCompatibility = 1.8

intellij {
    version idea_version
    pluginName plugin_name
    updateSinceUntilBuild false
    downloadSources true
    sandboxDirectory "idea-sandbox"
    instrumentCode = true
    updateSinceUntilBuild false
    sameSinceUntilBuild false

    plugins "org.jetbrains.kotlin:1.3.11-release-IJ2017.3-1"
    //plugins "org.jetbrains.kotlin:1.3.11-release-IJ2017.3-1", "org.intellij.scala:2017.3.11"
    //plugins 'org.jetbrains.kotlin:1.3.21-release-IJ2018.2-1' //dependency kotlin


//    plugins = ['java']
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

patchPluginXml {
    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

repositories {

//    flatDir {
//        dirs 'libs'
//    }

    mavenCentral()

}

dependencies {
    implementation(project(path: ':common-api', configuration: 'default')) {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

//    implementation fileTree(dir: 'libs', include: ['*.jar'])


    implementation('com.itangcent:intellij-idea:1.0.3-SNAPSHOT') {
        exclude group: 'com.google.inject'
        exclude group: 'com.google.code.gson'
    }

    implementation('com.itangcent:intellij-kotlin-support:1.0.3-SNAPSHOT') {
        exclude group: 'com.google.inject'
        exclude group: 'com.google.code.gson'
    }

//    implementation('com.itangcent:intellij-scala-support:1.0.3-SNAPSHOT') {
//        exclude group: 'com.google.inject'
//        exclude group: 'com.google.code.gson'
//    }

    implementation("com.google.inject:guice:4.2.2") {
        exclude group: 'org.checkerframework', module: 'checker-compat-qual'
        exclude group: 'com.google.guava', module: 'guava'
    }

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.12.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.2'

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.34.0'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testRuntime("org.junit.vintage:junit-vintage-engine:5.7.1")
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"

    // https://search.maven.org/artifact/org.mockito.kotlin/mockito-kotlin/3.2.0/jar
    testImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.11.0'

    testImplementation('com.itangcent:intellij-idea-test:1.0.3-SNAPSHOT') {
        exclude group: 'com.nhaarman.mockitokotlin2', module: 'mockito-kotlin'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task findSpi {
    doLast {
        try {
            def names = [] as Set<String>
            def duplicated = [] as Set<String>
            //find duplicated files
            configurations.compile.forEach {
                if (it.isFile()) {
                    zipTree(it)
                            .filter { it.parentFile.path.endsWith("META-INF/services") }
                            .forEach {
                                if (!names.add(it.name)) {
                                    if (!duplicated.contains(it.name)) {
                                        duplicated.add(it.name)
                                    }
                                }
                            }
                }
            }

            def servicesDir = new File("./src/main/resources/META-INF/services/")
            servicesDir.delete()
            servicesDir.mkdirs()

            duplicated.forEach {
                try {
                    def targetFile = new File(servicesDir, it)
                    targetFile.createNewFile()
                    targetFile.text = ""
                } catch (e) {
                    println("error:" + e)
                }
            }

            configurations.compile.forEach {
                if (it.isFile()) {
                    zipTree(it)
                            .filter {
                                it.parentFile.path.endsWith("META-INF/services") &&
                                        duplicated.contains(it.name)
                            }
                            .forEach {
                                try {
                                    def targetFile = new File(servicesDir, it.name)
                                    if (!targetFile.exists()) {
                                        targetFile.createNewFile()
                                    }
                                    targetFile.append(it.text)
                                    targetFile.append("\n")
                                } catch (e) {
                                    println("error to append services info to:" + it.name + e)
                                }
                            }
                }
            }
        } catch (e) {
            println("error to find spi:" + e)
        }
    }
}

test {
    useJUnitPlatform()
}