module=#module
ignore=#ignore
field.name=@com.fasterxml.jackson.annotation.JsonProperty#value
field.ignore=@com.fasterxml.jackson.annotation.JsonIgnore#value
field.mock[@com.fasterxml.jackson.annotation.JsonFormat]=groovy:
return "@datetime(\"" + it.ann("com.fasterxml.jackson.annotation.JsonFormat","pattern") + "\")"
field.name=@com.google.gson.annotations.SerializedName#value
field.ignore=!@com.google.gson.annotations.Expose#serialize
field.ignore=groovy:it.hasModifier("transient")
field.required=@org.springframework.lang.NonNull
param.ignore=groovy:it.type().isExtend("org.springframework.validation.BindingResult")
field.mock[@org.springframework.format.annotation.DateTimeFormat]=groovy:
return "@datetime(\"" + it.ann("org.springframework.format.annotation.DateTimeFormat","pattern") + "\")"
param.required=@jakarta.validation.constraints.NotBlank
field.required=@jakarta.validation.constraints.NotBlank
param.required=@jakarta.validation.constraints.NotNull
field.required=@jakarta.validation.constraints.NotNull
param.required=@jakarta.validation.constraints.NotEmpty
field.required=@jakarta.validation.constraints.NotEmpty
type.is_file=groovy:it.isExtend("org.springframework.web.multipart.MultipartFile")
api.tag[@kotlin.Deprecated]=deprecated
api.tag[groovy:it.containingClass().hasAnn("kotlin.Deprecated")]=deprecated
api.status[#undone]=undone
api.status[#todo]=undone
field.mock=#mock
constant.field.ignore=groovy:it.name()=="serialVersionUID"
properties.prefix=@org.springframework.boot.context.properties.ConfigurationProperties
properties.prefix=@org.springframework.boot.context.properties.ConfigurationProperties#prefix
field.name=@com.alibaba.fastjson.annotation.JSONField#value
enum.use.by.type=true
json.rule.enum.convert=~#name()
ignored.classes_or_packages=java.lang.Class,java.lang.ClassLoader,java.lang.Module,java.lang.module,java.lang.annotation,
java.lang.security,java.lang.invoke,java.lang.reflect,jdk.internal,java.util.jar,java.util.function,
java.util.stream,java.util.logging,java.util.regex,java.util.zip,java.util.concurrent.locks,
org.jooq
field.ignore=groovy:
def prefixList = it.type().name().tokenize(/[<>,]/).collect{
it.tokenize('.').inject([]) { acc, val -> acc << (acc ? "${acc.last()}.${val}" : val) }
}.flatten()
def ignored = config.getValues("ignored.classes_or_packages").collect{
it.tokenize(',').collect { it.trim() }.findAll { it }
}.flatten()
return !prefixList.intersect(ignored).isEmpty()
ignore=@Ignore