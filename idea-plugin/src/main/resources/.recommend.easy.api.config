#[module]*
#Get the module from the comment,group the apis
module=#module

#[ignore]*
#Ignore class/api
ignore=#ignore

#[deprecated_java]*
#deprecated info(java)

method.doc[#deprecated]=groovy:"\n「已废弃」" + it.doc("deprecated")
method.doc[@java.lang.Deprecated]=「已废弃」

method.doc[groovy:it.containingClass().hasDoc("deprecated")]=groovy:"\n「已废弃」" + it.containingClass().doc("deprecated")
method.doc[groovy:it.containingClass().hasAnn("java.lang.Deprecated")]=「已废弃」

field.doc[#deprecated]=groovy:"\n「已废弃」" + it.doc("deprecated")
field.doc[@java.lang.Deprecated]=「已废弃」

#[deprecated_kotlin]*
#deprecated info(kotlin)

method.doc[@kotlin.Deprecated]=groovy:"\n「已废弃」" + it.ann("kotlin.Deprecated","message")
method.doc[groovy:it.containingClass().hasAnn("kotlin.Deprecated")]=groovy:"\n「已废弃」 " + it.containingClass().ann("kotlin.Deprecated","message")
field.doc[@kotlin.Deprecated]=groovy:"\n「已废弃」" + it.ann("kotlin.Deprecated","message")

#[not_ignore_irregular_api_method]
# not ignore irregular api method
ignore_irregular_api_method=false

#[Jackson]*
#Support for Jackson annotations
field.name=@com.fasterxml.jackson.annotation.JsonProperty#value
field.ignore=@com.fasterxml.jackson.annotation.JsonIgnore#value
field.mock[@com.fasterxml.jackson.annotation.JsonFormat]=groovy:```
    return "@datetime(\"" + it.ann("com.fasterxml.jackson.annotation.JsonFormat","pattern") + "\")"
```

#[Jackson_JsonPropertyOrder]
#Support for Jackson annotation JsonPropertyOrder
field.order=@com.fasterxml.jackson.annotation.JsonProperty#index
json.class.parse.before[@com.fasterxml.jackson.annotation.JsonPropertyOrder]=groovy:```
    def properties = it.annValue("com.fasterxml.jackson.annotation.JsonPropertyOrder")
    properties.each { property ->
        session.push("JsonPropertyOrder-properties-"+it.name(), property)
    }
    session.set("JsonPropertyOrder-alphabetic"+it.name(),
        it.annValue("com.fasterxml.jackson.annotation.JsonPropertyOrder","alphabetic") ?: false)
```
json.class.parse.after[@com.fasterxml.jackson.annotation.JsonPropertyOrder]=groovy:```
    session.remove("JsonPropertyOrder-properties-"+it.name())
    session.remove("JsonPropertyOrder-"+it.name())
```
field.order=groovy:```
    def index = session.get("JsonPropertyOrder-properties-"+ it.containingClass().name())?.indexOf(it.name())
    if (index == -1) {
        return null
    }else{
        return index
    }
```
field.order.with=groovy:```
    def orderedProperties = session.get("JsonPropertyOrder-properties-"+ a.containingClass().name())
    if(a.name() in orderedProperties) {
         if(b.name() in orderedProperties){
             return orderedProperties.indexOf(a.name()) - orderedProperties.indexOf(b.name())
         }else{
             return -1
         }
    } else if(b.name() in orderedProperties){
        return 1
    } else if(session.get("JsonPropertyOrder-alphabetic"+a.containingClass().name())){
        return a.name().compareTo(b.name())
    } else {
        return null
    }
```

#[Jackson_JsonIgnoreProperties]
#Support for Jackson annotation JsonIgnoreProperties

json.cache.disable=true
field.ignore=groovy:it.containingClass().annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")?.contains(it.name())
json.group=@com.fasterxml.jackson.annotation.JsonIgnoreProperties
field.parse.before[@com.fasterxml.jackson.annotation.JsonIgnoreProperties]=groovy:```
    def properties = it.annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")
    for(property in properties){
        def path = fieldContext.property(property)
        session.set("json-ignore", path, true)
    }
```
field.parse.after[@com.fasterxml.jackson.annotation.JsonIgnoreProperties]=groovy:```
    def properties = it.annValue("com.fasterxml.jackson.annotation.JsonIgnoreProperties")
    for(property in properties){
        def path = fieldContext.property(property)
        session.remove("json-ignore", path)
    }
```
field.ignore=groovy:```
    return session.get("json-ignore", fieldContext.path())
```

#[Jackson_JsonUnwrapped]
#Support for Jackson annotation JsonUnwrapped
json.field.parse.before[@com.fasterxml.jackson.annotation.JsonUnwrapped]=groovy:```
    def prefix = it.ann("com.fasterxml.jackson.annotation.JsonUnwrapped","prefix")
    if(tool.notNullOrEmpty(prefix)){
        session.set("field.prefix", fieldContext.path(), prefix)
    }
    def suffix = it.ann("com.fasterxml.jackson.annotation.JsonUnwrapped","suffix")
    if(tool.notNullOrEmpty(suffix)){
        session.set("field.suffix", fieldContext.path(), suffix)
    }
```
field.name.prefix=groovy:```
    def parentPath = tool.substringBeforeLast(fieldContext.path(),".")
    return session.get("field.prefix",parentPath)
```
field.name.suffix=groovy:```
    def parentPath = tool.substringBeforeLast(fieldContext.path(),".")
    return session.get("field.suffix",parentPath)
```
json.unwrapped=@com.fasterxml.jackson.annotation.JsonUnwrapped
json.field.parse.after[@com.fasterxml.jackson.annotation.JsonUnwrapped]=groovy:```
    def prefix = it.ann("com.fasterxml.jackson.annotation.JsonUnwrapped","prefix")
    if(tool.notNullOrEmpty(prefix)){
        session.remove("field.prefix", fieldContext.path())
    }
    def suffix = it.ann("com.fasterxml.jackson.annotation.JsonUnwrapped","suffix")
    if(tool.notNullOrEmpty(suffix)){
        session.remove("field.suffix", fieldContext.path())
    }
```

#[Gson]*
#Support for Gson annotations
field.name=@com.google.gson.annotations.SerializedName#value
field.ignore=!@com.google.gson.annotations.Expose#serialize

#[ignore_transient_field]*
#ignore transient field
field.ignore=groovy:it.hasModifier("transient")

#[converts]*
#The ObjectId and Date will be parsed as strings
json.rule.convert[org.bson.types.ObjectId]=java.lang.String
json.rule.convert[java.util.Date]=java.lang.String
json.rule.convert[java.sql.Date]=java.lang.String
json.rule.convert[java.sql.Time]=java.lang.String
json.rule.convert[java.sql.Timestamp]=java.lang.String
json.rule.convert[java.time.LocalDateTime]=java.lang.String
json.rule.convert[java.time.LocalDate]=java.lang.String
json.rule.convert[java.math.BigInteger]=java.lang.Long
json.rule.convert[java.net.URL]=java.lang.String
json.rule.convert[java.util.concurrent.atomic.AtomicBoolean]=java.lang.Boolean
json.rule.convert[java.util.concurrent.atomic.AtomicLong]=java.lang.Long
json.rule.convert[java.util.concurrent.atomic.AtomicInteger]=java.lang.Integer

#[spring_Entity]*
#resolve HttpEntity/RequestEntity/ResponseEntity/DeferredResult
###set resolveProperty = false
json.rule.convert[#regex:org.springframework.http.HttpEntity<(.*?)>]=${1}
json.rule.convert[org.springframework.http.HttpEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.http.RequestEntity<(.*?)>]=${1}
json.rule.convert[org.springframework.http.RequestEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.http.ResponseEntity<(.*?)>]=${1}
json.rule.convert[org.springframework.http.ResponseEntity]=java.lang.Object
json.rule.convert[#regex:org.springframework.web.context.request.async.DeferredResult<(.*?)>]=${1}
json.rule.convert[org.springframework.web.context.request.async.DeferredResult]=java.lang.Object
json.rule.convert[#regex:org.reactivestreams.Publisher<(.*?)>]=${1}
json.rule.convert[org.reactivestreams.Publisher]=java.lang.Object
###set resolveProperty = true

#[spring_webflux]
#resolve Mono/Flux
###set resolveProperty = false
json.rule.convert[#regex:reactor.core.publisher.Mono<(.*?)>]=${1}
json.rule.convert[#regex:reactor.core.publisher.Mono]=java.lang.Object
json.rule.convert[#regex:reactor.core.publisher.Flux<(.*?)>]=java.util.List<${1}>
json.rule.convert[#regex:reactor.core.publisher.Flux]=java.util.List<java.lang.Object>
###set resolveProperty = true

#[spring.validations]*
#Support spring.validations
field.required=@org.springframework.lang.NonNull
param.ignore=groovy:it.type().isExtend("org.springframework.validation.BindingResult")
field.mock[@org.springframework.format.annotation.DateTimeFormat]=groovy:```
    return "@datetime(\"" + it.ann("org.springframework.format.annotation.DateTimeFormat","pattern") + "\")"
```

#[spring.ui]*
#Support spring.ui
param.ignore=groovy:it.type().name()=="org.springframework.ui.Model"
param.ignore=groovy:it.type().name()=="org.springframework.ui.ModelMap"
param.ignore=groovy:it.type().name()=="org.springframework.web.servlet.ModelAndView"


#[jakarta.validation]*
#Support for jakarta.validation annotations
param.required=@jakarta.validation.constraints.NotBlank
field.required=@jakarta.validation.constraints.NotBlank
param.required=@jakarta.validation.constraints.NotNull
field.required=@jakarta.validation.constraints.NotNull
param.required=@jakarta.validation.constraints.NotEmpty
field.required=@jakarta.validation.constraints.NotEmpty


#[jakarta.validation(strict)]
#Support for jakarta.validation annotations(strict)
json.cache.disable=true
json.group=groovy:session.get("json-group")
param.before=groovy:```
    if(!it.hasAnn("org.springframework.validation.annotation.Validated")){
        return
    }
    session.set("json-group", it.annValue("org.springframework.validation.annotation.Validated")
        ?: helper.findClass("javax.validation.groups.Default"))
```
param.after=groovy:```
    session.remove("json-group")
```
param.required=@jakarta.validation.constraints.NotBlank
param.required=@jakarta.validation.constraints.NotNull
param.required=@jakarta.validation.constraints.NotEmpty
check_annotated_Validated=```
    if(session.get("json-group") == null){
        return
    }
```
check_groups_jakarta=```
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("jakarta.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("jakarta.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(fieldGroup.isExtend(paramGroup.name())){
                    return true
                }
            }
        }
    }
    return false
```
field.required[@jakarta.validation.constraints.NotBlank]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("jakarta.validation.constraints.NotBlank")
    ${check_groups_jakarta}
```
field.required[@jakarta.validation.constraints.NotNull]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("jakarta.validation.constraints.NotNull")
    ${check_groups_jakarta}
```
field.required[@jakarta.validation.constraints.NotEmpty]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("jakarta.validation.constraints.NotEmpty")
    ${check_groups_jakarta}
```


#[javax.validation]*
#Support for javax.validation annotations
param.required=@javax.validation.constraints.NotBlank
field.required=@javax.validation.constraints.NotBlank
param.required=@javax.validation.constraints.NotNull
field.required=@javax.validation.constraints.NotNull
param.required=@javax.validation.constraints.NotEmpty
field.required=@javax.validation.constraints.NotEmpty


#[javax.validation(strict)]
#Support for javax.validation annotations(strict)
json.cache.disable=true
json.group=groovy:session.get("json-group")
param.before=groovy:```
    if(!it.hasAnn("org.springframework.validation.annotation.Validated")){
        return
    }
    session.set("json-group", it.annValue("org.springframework.validation.annotation.Validated")
        ?: helper.findClass("javax.validation.groups.Default"))
```
param.after=groovy:```
    session.remove("json-group")
```
param.required=@javax.validation.constraints.NotBlank
param.required=@javax.validation.constraints.NotNull
param.required=@javax.validation.constraints.NotEmpty
check_annotated_Validated=```
    if(session.get("json-group") == null){
        return
    }
```
check_groups_javax=```
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("javax.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("javax.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(fieldGroup.isExtend(paramGroup.name())){
                    return true
                }
            }
        }
    }
    return false
```
field.required[@javax.validation.constraints.NotBlank]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("javax.validation.constraints.NotBlank")
    ${check_groups_javax}
```
field.required[@javax.validation.constraints.NotNull]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("javax.validation.constraints.NotNull")
    ${check_groups_javax}
```
field.required[@javax.validation.constraints.NotEmpty]=groovy:```
    ${check_annotated_Validated}
    def annMaps = it.annMaps("javax.validation.constraints.NotEmpty")
    ${check_groups_javax}
```

#[is_file]*
#Support spring file
type.is_file=groovy:it.isExtend("org.springframework.web.multipart.MultipartFile")

#[yapi_tag]*
#yapi tag
api.tag[@java.lang.Deprecated]=deprecated
api.tag[#deprecated]=deprecated
api.tag[groovy:it.containingClass().hasAnn("java.lang.Deprecated")]=deprecated
api.tag[groovy:it.containingClass().hasDoc("deprecated")]=deprecated

#[yapi_tag_kotlin]*
#yapi tag for kotlin
api.tag[@kotlin.Deprecated]=deprecated
api.tag[groovy:it.containingClass().hasAnn("kotlin.Deprecated")]=deprecated

#[yapi_status]*
#yapi status
api.status[#undone]=undone
api.status[#todo]=undone

#[yapi_mock]*
#yapi mock
field.mock=#mock

#[yapi_tag]*
api.tag=#tag
api.tag.delimiter=,&

#[import_spring_properties]
#Import spring properties
###set ignoreNotFoundFile = true
###set ignoreUnresolved = true
properties.additional=${module_path}/src/main/resources/application.properties
properties.additional=${module_path}/src/main/resources/application.yml
properties.additional=${module_path}/src/main/resources/application.yaml
###set ignoreUnresolved = false
###set ignoreNotFoundFile = false

#[resolve_spring_properties]
#Resolve spring properties
###set ignoreUnresolved = true
class.prefix.path=${server.servlet.context-path}
###set ignoreUnresolved = false

#[ignore_serialVersionUID]*
#ignore serialVersionUID
constant.field.ignore=groovy:it.name()=="serialVersionUID"

#[support_mock_for_general]*

#mock for date

###set resolveMulti = first
java_date_types=["java.util.Date","java.sql.Timestamp","java.time.LocalDate","java.time.LocalDateTime"]
field.mock[groovy:${java_date_types}.contains(it.type().name())&&it.jsonType().name()=="java.lang.String"] = groovy:"@datetime"
field.mock[groovy:${java_date_types}.contains(it.type().name())&&it.jsonType().name()=="java.lang.Long"] = groovy:"@timestamp@string(\"number\", 3)"
###set resolveMulti = error

#[private_protected_field_only]
#only keep private/protected field
field.ignore=groovy:!(it.hasModifier("private")||it.hasModifier("protected"))

#[support_mock_for_javax_validation]*

# mock for javax.validation

###set resolveMulti = first
# define var
number_min=-9999
number_max=9999
float_dmin=2
java_integer_types=["java.lang.Integer","int","java.lang.Long","long","java.lang.Short","short","java.math.BigInteger"]
java_float_types=["java.lang.Float","float","java.lang.Double","double","java.math.BigDecimal"]
# mock_integer_or_float=${java_integer_types}.contains(it.type().name())?"@integer":"@float"

# AssertTrue|AssertFalse|Email
field.mock[@javax.validation.constraints.AssertTrue]=true
field.mock[@javax.validation.constraints.AssertFalse]=false
field.mock[@javax.validation.constraints.Email]=groovy:"@email"

# Positive&PositiveOrZero
field.mock[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(1,${number_max})"
field.mock[groovy:it.hasAnn("javax.validation.constraints.PositiveOrZero")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(0,${number_max})"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(0.01,${number_max},${float_dmin})"
field.mock[groovy:it.hasAnn("javax.validation.constraints.PositiveOrZero")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(0,${number_max},${float_dmin})"

# Negative&NegativeOrZero
field.mock[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(${number_min},-1)"
field.mock[groovy:it.hasAnn("javax.validation.constraints.NegativeOrZero")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(${number_min},0)"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(${number_min},0.01,${float_dmin})"
field.mock[groovy:it.hasAnn("javax.validation.constraints.NegativeOrZero")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(${number_min},0,${float_dmin})"

# Max+Min
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&it.hasAnn("javax.validation.constraints.Min")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer("+it.ann("javax.validation.constraints.Min")+","+it.ann("javax.validation.constraints.Max")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&it.hasAnn("javax.validation.constraints.Min")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float("+it.ann("javax.validation.constraints.Min")+","+it.ann("javax.validation.constraints.Max")+",${float_dmin})"

# Max|Min
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(0,"+it.ann("javax.validation.constraints.Max")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Min")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer("+it.ann("javax.validation.constraints.Min")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(0,"+it.ann("javax.validation.constraints.Max")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.Min")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float("+it.ann("javax.validation.constraints.Min")+")"

# DecimalMax+DecimalMin
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer("+it.ann("javax.validation.constraints.DecimalMin")+","+it.ann("javax.validation.constraints.DecimalMax")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float("+it.ann("javax.validation.constraints.DecimalMin")+","+it.ann("javax.validation.constraints.DecimalMax")+",${float_dmin})"

# DecimalMax|DecimalMin
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer(0,"+it.ann("javax.validation.constraints.DecimalMax")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:"@integer("+it.ann("javax.validation.constraints.DecimalMin")+")"
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float(0,"+it.ann("javax.validation.constraints.DecimalMax")+",${float_dmin})"
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_float_types}.contains(it.jsonType().name())]=groovy:"@float("+it.ann("javax.validation.constraints.DecimalMin")+",${float_dmin})"

###set resolveMulti = error

#[not_ignore_static_final_field]
# not ignore `static final` field
ignore_static_and_final_field=false

#[Jackson_JsonNaming]
# use Jackson JsonNaming
jackson.translateLowerCaseWithSeparator=```
    final int length = input.length();
    final StringBuilder result = new StringBuilder(length + (length >> 1));
    int upperCount = 0;
    for (int i = 0; i < length; ++i) {
        char ch = input.charAt(i);
        char lc = Character.toLowerCase(ch);

        if (lc == ch) { // lower-case letter means we can get new word
            // but need to check for multi-letter upper-case (acronym), where assumption
            // is that the last upper-case char is start of a new word
            if (upperCount > 1) {
                // so insert hyphen before the last character now
                result.insert(result.length() - 1, separator);
            }
            upperCount = 0;
        } else {
            // Otherwise starts new word, unless beginning of string
            if ((upperCount == 0) && (i > 0)) {
                result.append(separator);
            }
            ++upperCount;
        }
        result.append(lc);
    }
    return result.toString();
```
field.name=groovy:```
    def namingStrategy = it.containingClass().ann("com.fasterxml.jackson.databind.annotation.JsonNaming")
    if(namingStrategy==null) return null
    String input = it.name()
    if (input == null || input.isEmpty()){
        return input; // garbage in, garbage out
    }
    logger.info("namingStrategy:"+namingStrategy)
    if(namingStrategy == "com.fasterxml.jackson.databind.PropertyNamingStrategies.UpperCamelCaseStrategy"){
        // Replace first lower-case letter with upper-case equivalent
        char c = input.charAt(0);
        char uc = Character.toUpperCase(c);
        if (c == uc) {
            return input;
        }
        StringBuilder sb = new StringBuilder(input);
        sb.setCharAt(0, uc);
        return sb.toString();
    } else if(namingStrategy == "com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy"){
        int length = input.length();
        StringBuilder result = new StringBuilder(length * 2);
        int resultLength = 0;
        boolean wasPrevTranslated = false;
        for (int i = 0; i < length; i++)
        {
            char c = input.charAt(i);
            if (i > 0 || c != '_') // skip first starting underscore
            {
                if (Character.isUpperCase(c))
                {
                    if (!wasPrevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != '_')
                    {
                        result.append('_');
                        resultLength++;
                    }
                    c = Character.toLowerCase(c);
                    wasPrevTranslated = true;
                }
                else
                {
                    wasPrevTranslated = false;
                }
                result.append(c);
                resultLength++;
            }
        }
        return resultLength > 0 ? result.toString() : input
    } else if(namingStrategy == "com.fasterxml.jackson.databind.PropertyNamingStrategies.LowerCaseStrategy"){
        return input.toLowerCase()
    } else if(namingStrategy == "com.fasterxml.jackson.databind.PropertyNamingStrategies.KebabCaseStrategy"){
        char separator = '-'
        ${jackson.translateLowerCaseWithSeparator}
    } else if(namingStrategy == "com.fasterxml.jackson.databind.PropertyNamingStrategies.LowerDotCaseStrategy"){
        char separator = '.'
        ${jackson.translateLowerCaseWithSeparator}
    }
```


#[Jackson_UpperCamelCaseStrategy]
# use Jackson UpperCamelCaseStrategy
field.name=groovy:```
    String input = it.name()
    if (input == null || input.isEmpty()){
        return input; // garbage in, garbage out
    }
    // Replace first lower-case letter with upper-case equivalent
    char c = input.charAt(0);
    char uc = Character.toUpperCase(c);
    if (c == uc) {
        return input;
    }
    StringBuilder sb = new StringBuilder(input);
    sb.setCharAt(0, uc);
    return sb.toString();
```

#[Jackson_SnakeCaseStrategy]
# use Jackson SnakeCaseStrategy
field.name=groovy:```
    String input = it.name()
    if (input == null) return input; // garbage in, garbage out
    int length = input.length();
    StringBuilder result = new StringBuilder(length * 2);
    int resultLength = 0;
    boolean wasPrevTranslated = false;
    for (int i = 0; i < length; i++)
    {
        char c = input.charAt(i);
        if (i > 0 || c != '_') // skip first starting underscore
        {
            if (Character.isUpperCase(c))
            {
                if (!wasPrevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != '_')
                {
                    result.append('_');
                    resultLength++;
                }
                c = Character.toLowerCase(c);
                wasPrevTranslated = true;
            }
            else
            {
                wasPrevTranslated = false;
            }
            result.append(c);
            resultLength++;
        }
    }
    return resultLength > 0 ? result.toString() : input;
```

#[Jackson_LowerCaseStrategy]
# use Jackson LowerCaseStrategy
field.name=groovy:it.name().toLowerCase()

#[Jackson_KebabCaseStrategy]
# use Jackson KebabCaseStrategy
field.name=groovy:```
    String input = it.name()
    char separator = '-'
    if (input == null) {
        return input; // garbage in, garbage out
    }
    final int length = input.length();
    if (length == 0) {
        return input;
    }

    final StringBuilder result = new StringBuilder(length + (length >> 1));
    int upperCount = 0;
    for (int i = 0; i < length; ++i) {
        char ch = input.charAt(i);
        char lc = Character.toLowerCase(ch);

        if (lc == ch) { // lower-case letter means we can get new word
            // but need to check for multi-letter upper-case (acronym), where assumption
            // is that the last upper-case char is start of a new word
            if (upperCount > 1) {
                // so insert hyphen before the last character now
                result.insert(result.length() - 1, separator);
            }
            upperCount = 0;
        } else {
            // Otherwise starts new word, unless beginning of string
            if ((upperCount == 0) && (i > 0)) {
                result.append(separator);
            }
            ++upperCount;
        }
        result.append(lc);
    }
    return result.toString();
```

#[Jackson_LowerDotCaseStrategy]
# use Jackson LowerDotCaseStrategy
field.name=groovy:```
    String input = it.name()
    char separator = '.'
    if (input == null) {
        return input; // garbage in, garbage out
    }
    final int length = input.length();
    if (length == 0) {
        return input;
    }

    final StringBuilder result = new StringBuilder(length + (length >> 1));
    int upperCount = 0;
    for (int i = 0; i < length; ++i) {
        char ch = input.charAt(i);
        char lc = Character.toLowerCase(ch);

        if (lc == ch) { // lower-case letter means we can get new word
            // but need to check for multi-letter upper-case (acronym), where assumption
            // is that the last upper-case char is start of a new word
            if (upperCount > 1) {
                // so insert hyphen before the last character now
                result.insert(result.length() - 1, separator);
            }
            upperCount = 0;
        } else {
            // Otherwise starts new word, unless beginning of string
            if ((upperCount == 0) && (i > 0)) {
                result.append(separator);
            }
            ++upperCount;
        }
        result.append(lc);
    }
    return result.toString();
```

#[properties]*
# @ConfigurationProperties
properties.prefix=@org.springframework.boot.context.properties.ConfigurationProperties
properties.prefix=@org.springframework.boot.context.properties.ConfigurationProperties#prefix

#[Fastjson]*
#Support for Fastjson annotations
field.name=@com.alibaba.fastjson.annotation.JSONField#value

#[enum_auto_select_field_by_type]*
#Auto map enum to a type matched field in it
enum.use.by.type=true
json.rule.enum.convert=~#name()

#[enum_use_name]
#Map enum to it's name
enum.use.name=true
json.rule.enum.convert=~#name()

#[enum_use_ordinal]
#Map enum to it's ordinal
enum.use.ordinal=true
json.rule.enum.convert=~#ordinal()

#[ignore_some_common_classes]*
#ignore some common classes
ignored.classes_or_packages=```
    java.lang.Class,java.lang.ClassLoader,java.lang.Module,java.lang.module,java.lang.annotation,
    java.lang.security,java.lang.invoke,java.lang.reflect,jdk.internal,java.util.jar,java.util.function,
    java.util.stream,java.util.logging,java.util.regex,java.util.zip,java.util.concurrent.locks,
    org.jooq
```
###set resolveProperty = false
field.ignore=groovy:```
    def prefixList = it.type().name().tokenize(/[<>,]/).collect{
     it.tokenize('.').inject([]) { acc, val -> acc << (acc ? "${acc.last()}.${val}" : val) }
    }.flatten()
    def ignored = config.getValues("ignored.classes_or_packages").collect{
         it.tokenize(',').collect { it.trim() }.findAll { it }
    }.flatten()
    return !prefixList.intersect(ignored).isEmpty()
```
###set resolveProperty = true

#[field_order]
field.order=#order
#[field_order_child_first]
# child fields first
field.order.with=groovy:```
    def aDefineClass = a.defineClass()
    def bDefineClass = b.defineClass()
    if(aDefineClass==bDefineClass){
        return 0
    }else if(aDefineClass.isExtend(bDefineClass.name())){
        return -1
    }else{
        return 1
    }
```

#[field_order_parent_first]
# parent fields first
field.order.with=groovy:```
    def aDefineClass = a.defineClass()
    def bDefineClass = b.defineClass()
    if(aDefineClass==bDefineClass){
        return null
    }else if(aDefineClass.isExtend(bDefineClass.name())){
        return 1
    }else{
        return -1
    }
```

#[field_order_alphabetically]
# fields alphabetically ordered
field.order.with=groovy:```
    return a.name().compareTo(b.name())
```

#[field_order_alphabetically_descending]
# fields descending alphabetically ordered
field.order.with=groovy:```
    return -a.name().compareTo(b.name())
```