added# rules for javax.validation
json.cache.disable=true
json.group=groovy:session.get("json-group")
param.before=groovy:```
    session.set("json-group", it.annValue("org.springframework.validation.annotation.Validated"))
```
param.after=groovy:```
    session.remove("json-group")
```
javax_check_groups=```
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("javax.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("javax.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(paramGroup.isExtend(fieldGroup.name())){
                    return true
                }
            }
        }
    }
    return false
```
javax_check_groups_return_flag=```
    def flag = false
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("javax.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("javax.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(paramGroup.isExtend(fieldGroup.name())){
                    flag = true
                    break
                }
            }
        }
    }
```

javax_check_groups_return_flagMax=```
    def flagMax = false
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("javax.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("javax.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(paramGroup.isExtend(fieldGroup.name())){
                    flagMax = true
                    break
                }
            }
        }
    }
```


javax_check_groups_return_flagMin=```
    def flagMin = false
    for(annMap in annMaps){
        def fieldGroups = annMap["groups"] ?: [helper.findClass("javax.validation.groups.Default")]
        def paramGroups = session.get("json-group") ?: [helper.findClass("javax.validation.groups.Default")]
        for(fieldGroup in fieldGroups){
            for(paramGroup in paramGroups){
                if(paramGroup.isExtend(fieldGroup.name())){
                    flagMin = true
                    break
                }
            }
        }
    }
```

#Support for javax.validation annotations
field.required[@javax.validation.constraints.NotBlank]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.NotBlank")
    ${javax_check_groups}
```
field.required[@javax.validation.constraints.NotNull]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.NotNull")
     ${javax_check_groups}
```
field.required[@javax.validation.constraints.NotEmpty]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.NotEmpty")
    ${javax_check_groups}
```
param.required=@javax.validation.constraints.NotBlank
param.required=@javax.validation.constraints.NotNull
param.required=@javax.validation.constraints.NotEmpty



###set resolveMulti = first
# define var
number_min=-9999
number_max=9999
float_dmin=2
java_integer_types=["java.lang.Integer","int","java.lang.Long","long","java.lang.Short","short","java.math.BigInteger"]
java_float_types=["java.lang.String","java.lang.Float","float","java.lang.Double","double","java.math.BigDecimal"]
# mock_integer_or_float=${java_integer_types}.contains(it.type().name())?"@integer":"@float"

# AssertTrue|AssertFalse
field.mock[@javax.validation.constraints.AssertTrue]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.AssertTrue")
    ${javax_check_groups_return_flag}
    if(flag){
        return true
    }
```
field.demo[@javax.validation.constraints.AssertTrue]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.AssertTrue")
    ${javax_check_groups_return_flag}
    if(flag){
        return true
    }
```
field.mock[@javax.validation.constraints.AssertFalse]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.AssertFalse")
    ${javax_check_groups_return_flag}
    if(flag){
        return false
    }
```
field.demo[@javax.validation.constraints.AssertFalse]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.AssertFalse")
    ${javax_check_groups_return_flag}
    if(flag){
        return false
    }
```

# DecimalMax+DecimalMin -mock
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
    ${javax_check_groups_return_flagMin}
    annMaps = it.annMaps("javax.validation.constraints.DecimalMax")
    ${javax_check_groups_return_flagMax}
    if(flagMin&&flagMax){
        return "@integer("+it.ann("javax.validation.constraints.DecimalMin")+","+it.ann("javax.validation.constraints.DecimalMax")+")"
    }else if(flagMin&&!flagMax){
        return "@integer("+it.ann("javax.validation.constraints.DecimalMin")+")"
    }else if(!flagMin&&flagMax){
        return "@integer(0,"+it.ann("javax.validation.constraints.DecimalMax")+")"
    }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
    ${javax_check_groups_return_flagMin}
    annMaps = it.annMaps("javax.validation.constraints.DecimalMax")
    ${javax_check_groups_return_flagMax}
    if(flagMin&&flagMax){
        return "@float("+it.ann("javax.validation.constraints.DecimalMin")+","+it.ann("javax.validation.constraints.DecimalMax")+",${float_dmin})"
    }else if(flagMin&&!flagMax){
        return "@float("+it.ann("javax.validation.constraints.DecimalMin")+",${number_max},${float_dmin})"
    }else if(!flagMin&&flagMax){
        return "@float(0,"+it.ann("javax.validation.constraints.DecimalMax")+",${float_dmin})"
    }
```

# DecimalMax|DecimalMin  -mock
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
      def annMaps = it.annMaps("javax.validation.constraints.DecimalMax")
      ${javax_check_groups_return_flagMax}
      if(flagMax){
         return "@integer(0,"+it.ann("javax.validation.constraints.DecimalMax")+")"
      }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
     ${javax_check_groups_return_flagMin}
     if(flagMin){
         return "@integer("+it.ann("javax.validation.constraints.DecimalMin")+")"
     }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMax")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.DecimalMax")
     ${javax_check_groups_return_flagMax}
     if(flagMax){
         return "@float(0,"+it.ann("javax.validation.constraints.DecimalMax")+",${float_dmin})"
     }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.DecimalMin")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
     ${javax_check_groups_return_flagMin}
     if(flagMin){
         return "@float("+it.ann("javax.validation.constraints.DecimalMin")+",${number_max},${float_dmin})"
     }
```

# DecimalMax„ÄÅDecimalMin  -advanced
field.advanced[@javax.validation.constraints.DecimalMax]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.DecimalMax")
    ${javax_check_groups_return_flag}
    if(flag){
        def ann = it.annMap("javax.validation.constraints.DecimalMax")
        return [maximum:ann["value"],exclusiveMaximum:(ann["inclusive"]==false)]
    }
```
field.advanced[@javax.validation.constraints.DecimalMin]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
    ${javax_check_groups_return_flag}
    if(flag){
        def ann = it.annMap("javax.validation.constraints.DecimalMin")
        return [minimum:ann["value"],exclusiveMinimum:(ann["inclusive"]==false)]
    }
```

# javax.validation.constraints.Digits
field.mock[groovy:it.hasAnn("javax.validation.constraints.Digits")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Digits")
    ${javax_check_groups_return_flag}
    if(flag){
        def max = "9".repeat(it.annValue("javax.validation.constraints.Digits","integer")).toInteger()
        return "@integer("+(-max)+","+max+")"
    }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Digits")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Digits")
    ${javax_check_groups_return_flag}
    if(flag){
            def max = ("9".repeat(it.annValue("javax.validation.constraints.Digits","integer"))+"."+"9".repeat(it.annValue("javax.validation.constraints.Digits","fraction"))).toDouble()
            return "@float("+(-max)+","+max+",0,"+it.ann("javax.validation.constraints.Digits","fraction")+")"
    }
```

field.advanced[groovy:it.hasAnn("javax.validation.constraints.Digits")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Digits")
    ${javax_check_groups_return_flag}
    if(flag){
          def max = "9".repeat(it.annValue("javax.validation.constraints.Digits","integer")).toInteger()
          return [minimum:-max,maximum:max]
    }
```
field.advanced[groovy:it.hasAnn("javax.validation.constraints.Digits")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Digits")
    ${javax_check_groups_return_flag}
    if(flag){
          def max = ("9".repeat(it.annValue("javax.validation.constraints.Digits","integer"))+"."+"9".repeat(it.annValue("javax.validation.constraints.Digits","fraction"))).toDouble()
          return [minimum:-max,maximum:max]
    }
```

# javax.validation.constraints.Email
field.mock[@javax.validation.constraints.Email]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Email")
    ${javax_check_groups_return_flag}
    if(flag){
        return "@email"
    }
```
field.advanced[@javax.validation.constraints.Email]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.Email")
    ${javax_check_groups_return_flag}
    def emailData = [:]
    if(flag){
        emailData["format"] = "email"
    }
    return emailData
```

# Max+Min
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&it.hasAnn("javax.validation.constraints.Min")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
        def annMaps = it.annMaps("javax.validation.constraints.Min")
        ${javax_check_groups_return_flagMin}
        annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
        ${javax_check_groups_return_flagMax}
        if(flagMin&&flagMax){
            return  "@integer("+it.ann("javax.validation.constraints.Min")+","+it.ann("javax.validation.constraints.Max")+")"
        }else if(flagMin&&!flagMax){
            return "@integer("+it.ann("javax.validation.constraints.Min")+")"
        }else if(!flagMin&&flagMax){
            return "@integer(0,"+it.ann("javax.validation.constraints.Max")+")"
        }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&it.hasAnn("javax.validation.constraints.Min")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.Min")
     ${javax_check_groups_return_flagMin}
     annMaps = it.annMaps("javax.validation.constraints.DecimalMin")
     ${javax_check_groups_return_flagMax}
      if(flagMin&&flagMax){
          return  "@float("+it.ann("javax.validation.constraints.Min")+","+it.ann("javax.validation.constraints.Max")+",${float_dmin})"
      }else if(flagMin&&!flagMax){
          return "@float("+it.ann("javax.validation.constraints.Min")+",${number_max},${float_dmin})"
      }else if(!flagMin&&flagMax){
          return "@float(0,"+it.ann("javax.validation.constraints.Max")+")"
      }
```

# Max|Min
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
      def annMaps = it.annMaps("javax.validation.constraints.Max")
      ${javax_check_groups_return_flagMax}
      if(flagMax){
         return  "@integer(0,"+it.ann("javax.validation.constraints.Max")+")"
      }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Min")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.Min")
     ${javax_check_groups_return_flagMin}
     if(flagMin){
         return "@integer("+it.ann("javax.validation.constraints.Min")+")"
     }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Max")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.Max")
          ${javax_check_groups_return_flagMax}
          if(flagMax){
             return  "@float(0,"+it.ann("javax.validation.constraints.Max")+")"
          }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Min")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.Min")
     ${javax_check_groups_return_flagMin}
     if(flagMin){
         return "@float("+it.ann("javax.validation.constraints.Min")+",${number_max},${float_dmin})"
     }
```

# Max„ÄÅMin  -advanced
field.advanced[@javax.validation.constraints.Max]=groovy:```
        def annMaps = it.annMaps("javax.validation.constraints.Max")
        ${javax_check_groups_return_flag}
        if(flag){
            def ann = it.annMap("javax.validation.constraints.Max")
            return [maximum:it.ann("javax.validation.constraints.Max")]
        }
```
field.advanced[@javax.validation.constraints.Min]=groovy:```
        def annMaps = it.annMaps("javax.validation.constraints.Min")
        ${javax_check_groups_return_flag}
        if(flag){
            def ann = it.annMap("javax.validation.constraints.Min")
            return [minimum:it.ann("javax.validation.constraints.Min")]
        }
```

# Negative&NegativeOrZero
field.mock[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
        def annMaps = it.annMaps("javax.validation.constraints.Negative")
        ${javax_check_groups_return_flag}
        if(flag){
            return  "@integer(${number_min},-1)"
        }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.NegativeOrZero")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
         def annMaps = it.annMaps("javax.validation.constraints.NegativeOrZero")
                ${javax_check_groups_return_flag}
                if(flag){
                    return  "@integer(${number_min},0)"
        }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
     def annMaps = it.annMaps("javax.validation.constraints.Negative")
                ${javax_check_groups_return_flag}
                if(flag){
                    return  "@float(${number_min},0.01,${float_dmin})"
        }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.NegativeOrZero")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
 def annMaps = it.annMaps("javax.validation.constraints.NegativeOrZero")
                ${javax_check_groups_return_flag}
                if(flag){
                    return  "@float(${number_min},0,${float_dmin})"
        }
```
field.advanced[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.Negative")
    ${javax_check_groups_return_flag}
    def neData = [:]
    if(flag){
        neData["maximum"] = -1
    }
    return neData
```
field.advanced[groovy:it.hasAnn("javax.validation.constraints.Negative")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.Negative")
    ${javax_check_groups_return_flag}
    def neData = [:]
    if(flag){
        neData["maximum"] = -0.001
    }
    return neData
```
field.advanced[@javax.validation.constraints.NegativeOrZero]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.NegativeOrZero")
    ${javax_check_groups_return_flag}
    def neData = [:]
    if(flag){
        neData["maximum"] = 0
    }
    return neData
```

# javax.validation.constraints.Pattern
field.advanced[@javax.validation.constraints.Pattern]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Pattern")
    ${javax_check_groups_return_flag}
    if(flag){
        return tool.toJson([pattern:it.ann("javax.validation.constraints.Pattern","regexp")])
    }
```

# Positive&PositiveOrZero
field.mock[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
   def annMaps = it.annMaps("javax.validation.constraints.Positive")
    ${javax_check_groups_return_flag}
    if(flag){
        return "@integer(1,${number_max})"
    }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.PositiveOrZero")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
   def annMaps = it.annMaps("javax.validation.constraints.PositiveOrZero")
    ${javax_check_groups_return_flag}
    if(flag){
        return "@integer(0,${number_max})"
    }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
   def annMaps = it.annMaps("javax.validation.constraints.Positive")
    ${javax_check_groups_return_flag}
    if(flag){
        return "@float(0.01,${number_max},${float_dmin})"
    }
```
field.mock[groovy:it.hasAnn("javax.validation.constraints.PositiveOrZero")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
   def annMaps = it.annMaps("javax.validation.constraints.PositiveOrZero")
    ${javax_check_groups_return_flag}
    if(flag){
        return "@float(0,${number_max},${float_dmin})"
    }
```
field.advanced[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_integer_types}.contains(it.jsonType().name())]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.Positive")
    ${javax_check_groups_return_flag}
    def poData = [:]
    if(flag){
        poData["minimum"] = 1
    }
    return poData
```
field.advanced[groovy:it.hasAnn("javax.validation.constraints.Positive")&&${java_float_types}.contains(it.jsonType().name())]=groovy:```
  def annMaps = it.annMaps("javax.validation.constraints.Positive")
    ${javax_check_groups_return_flag}
    def poData = [:]
    if(flag){
        poData["minimum"] = 0.001
    }
    return poData
```
field.advanced[@javax.validation.constraints.PositiveOrZero]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.PositiveOrZero")
        ${javax_check_groups_return_flag}
        def poData = [:]
        if(flag){
            poData["minimum"] = 0
        }
        return poData
```

# javax.validation.constraints.Size

field.mock[groovy:it.hasAnn("javax.validation.constraints.Size")&&it.jsonType().name()=="java.lang.String"]=groovy:```
   def annMaps = it.annMaps("javax.validation.constraints.Size")
    ${javax_check_groups_return_flag}
    if(flag){
           def ann = it.annMap("javax.validation.constraints.Size")
           if(ann.containsKey("min")&&ann.containsKey("max")){
               return "@string("+ann["min"]+","+ann["max"]+")"
           }else if(ann.containsKey("min")){
               return "@string("+ann["min"]+")"
           }else if(ann.containsKey("max")){
               return "@string(0,"+ann["max"]+")"
           }
    }
```
field.advanced[@javax.validation.constraints.Size]=groovy:```
    def annMaps = it.annMaps("javax.validation.constraints.Size")
    ${javax_check_groups_return_flag}
    if(flag){
          def element = (it.jsonType().name() == "java.lang.String")?"Length":"Items"
          def ann = it.annMap("javax.validation.constraints.Size")
          def advanced = [:]
          if(ann.containsKey("min")){
              advanced["min"+element] = ann["min"]
          }
          if(ann.containsKey("max")){
              advanced["max"+element] = ann["max"]
          }
          return advanced
    }
```
###set resolveMulti = error